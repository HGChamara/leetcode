package leetcode.binarytrees;

import java.util.Stack;

public class SameTree {

	public static void main(String[] args) {
		TreeNode node = new TreeNode(3);
		node.left = new TreeNode(9);
		node.right = new TreeNode(20);
		node.left.left = new TreeNode(1);
		node.left.right = new TreeNode(3);
		node.right.left = new TreeNode(15);
		node.right.right = new TreeNode(7);
		
		TreeNode node2 = new TreeNode(3);
		node2.left = new TreeNode(9);
		node2.right = new TreeNode(20);
		node2.left.left = new TreeNode(1);
		node2.left.right = new TreeNode(3);
		node2.right.left = new TreeNode(15);
		node2.right.right = new TreeNode(7);
		isSameTree(node, node2);

	}

	public static boolean isSameTree(TreeNode p, TreeNode q) {
        
		Stack<TreeNode> nodeStack = new Stack<TreeNode>();
		nodeStack.add(p);
		Stack<TreeNode> nodeStack2 = new Stack<TreeNode>();
		nodeStack2.add(q);
		
		while(!nodeStack.isEmpty() && !nodeStack2.isEmpty()) {
			TreeNode currNode1 = nodeStack.pop();
			TreeNode currNode2 = nodeStack2.pop();
			
			
			
			System.out.println(currNode1.val);
			if(currNode1.right != null) nodeStack.add(currNode1.right);
			if(currNode1.left != null) nodeStack.add(currNode1.left);
			
			if(currNode2.right != null) nodeStack2.add(currNode2.right);
			if(currNode2.left != null) nodeStack2.add(currNode2.left);
		}
		return false;
    }
}
