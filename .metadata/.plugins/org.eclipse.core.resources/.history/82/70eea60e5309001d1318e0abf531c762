package graphs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

public class LargestComponent {

	public static void main(String[] args) {
		Map<Integer, List<Integer>> graph = new HashMap();
		
		graph.put("q", new ArrayList<String>());
		
		graph.put(1, Arrays.asList(2,3));
		graph.put(2, Arrays.asList(4));
		graph.put(4, Arrays.asList(2,6));
		graph.put(3, Arrays.asList(1,5));
		graph.put(5, new ArrayList<Integer>());
		graph.put(6, new ArrayList<Integer>());
		
		graph.put(7, Arrays.asList(8));
		graph.put(8, Arrays.asList(9));
		graph.put(9, Arrays.asList(7));
		Set<String> set = new HashSet<String>();
		int count = 0;
		int max = Integer.MIN_VALUE;
		for(String s : graph.keySet()) {
			if(explore(graph, s, set, max)) {
				count++;
			}
		}
		
		
		
		System.out.println(count);
	}
	
	public static boolean explore(Map<String, List<String>> graph, String source,  Set<String> set, int max) {
		
		//if(source>max) max = source;
		
		if(set.contains(source)) return false;
		set.add(source);
		
		for(String node : graph.get(source)) {
			explore(graph, node, set);
		}
		return true;
	}
	
	
	


}
