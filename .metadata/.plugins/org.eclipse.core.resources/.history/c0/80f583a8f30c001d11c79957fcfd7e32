package leetcode.binarytrees;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class MaximumDepthTree {

	public static void main(String[] args) {

		TreeNode node = new TreeNode(4);
		node.left = new TreeNode(2);
		node.right = new TreeNode(7);
		node.left.left = new TreeNode(1);
		node.left.right = new TreeNode(3);
		node.right.left = new TreeNode(6);
		node.right.right = new TreeNode(9);

		int count = 0;
		System.out.println(maxDepthDIte(node));


	}

	public static int maxDepth(TreeNode node) {

		if (node == null)
			return 0;

		return 1 + Math.max(maxDepth(node.left),maxDepth(node.right));
		

	}
	
	
	public static int maxDepthDIte(TreeNode root) {
		if(root == null) return 0;
		Stack<TreeNode> stack = new Stack<TreeNode>();
		stack.add(root);
		int count = 0;
		
		
		
		while(!stack.isEmpty()) {
			TreeNode currNode = stack.pop();
			
			if(currNode.right != null) stack.add(currNode.right);
			if(currNode.left != null) stack.add(currNode.left);
			
			if(currNode.right != null || currNode.left != null) {
				count++;
			}
		}
		return count;
	}
	
	public static int maxDepthBIte(TreeNode root) {
		if(root == null) return 0;
		Queue<TreeNode> q = new LinkedList<TreeNode>();
		q.add(root);
		int count = 0;
		
		
		
		while(!stack.isEmpty()) {
			TreeNode currNode = stack.pop();
			
			if(currNode.right != null) stack.add(currNode.right);
			if(currNode.left != null) stack.add(currNode.left);
			
			if(currNode.right != null || currNode.left != null) {
				count++;
			}
		}
		return count;
	}

}
