package graphs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

public class LargestComponent {

	public static void main(String[] args) {
		Map<Integer, List<Integer>> graph = new HashMap();
		
		graph.put(10, new ArrayList<Integer>());
		
		graph.put(1, Arrays.asList(2,3));
		graph.put(2, Arrays.asList(4));
		graph.put(4, Arrays.asList(2,6));
		graph.put(3, Arrays.asList(1,5));
		graph.put(5, new ArrayList<Integer>());
		graph.put(6, new ArrayList<Integer>());
		
		graph.put(7, Arrays.asList(8));
		graph.put(8, Arrays.asList(9));
		graph.put(9, Arrays.asList(7));
		Set<Integer> set = new HashSet<Integer>();
		int max = 0;
		for(int s : graph.keySet()) {
			int maxs = explore(graph, s, set);
			System.out.println("FFFFFF "+maxs);
			if(maxs > max) max = maxs;
		}
		
		
		System.out.println(max);
	}
	
	public static int explore(Map<Integer, List<Integer>> graph, int source,  Set<Integer> set) {
		
		int currMax = 1;
		
		if(set.contains(source)) return 0;
		set.add(source);
		
		for(int node : graph.get(source)) {
			currMax += explore(graph, node, set);
		}
		return currMax;
	}
	
	
	


}
