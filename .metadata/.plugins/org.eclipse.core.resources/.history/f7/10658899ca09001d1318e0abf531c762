package graphs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.Stack;

public class ShortestPath {

	public static void main(String[] args) {
		Map<Integer, List<Integer>> graph = new HashMap();
		
		graph.put(10, new ArrayList<Integer>());
		
		graph.put(1, Arrays.asList(2,4));
		graph.put(2, Arrays.asList(1,3));
		graph.put(4, Arrays.asList(1,5));
		graph.put(3, Arrays.asList(2,5));
		graph.put(5, Arrays.asList(3,4));
		
		Set<Integer> set = new HashSet<Integer>();
		
	}
	
	public static int breathFirstTraverse(Map<Integer, List<Integer>> graph, int source, int target,  Set<Integer> set) {
		
		Queue<int[]> a = new LinkedList<int[]>();
	}
	
	class Element {
		int element;
		int length;
		
		public Element(int element, int length) {
			this.element = element;
			this.length = length;
		}
		
	}
}
